generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

//Plant Emporium

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PlantProduct {
  id          Int           @id @default(autoincrement())
  displayName String        @unique @map("display_name")
  urlName     String        @map("url_name")
  inventory   Int
  types       String[]
  description String
  keyPoints   String[]
  price       Float
  reviews     PlantReview[]
  imageUrl    String
  cartItem    CartItem[]

  @@map("plant_products")
}

model PlantUser {
  id        Int                    @id @default(autoincrement())
  reviews   PlantReview[]
  cart      ShoppingCart?
  address   PlantShippingAddress[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@map("plant_users")
}

model PlantShippingAddress {
  id      Int       @id @default(autoincrement())
  name    String
  address String
  zipCode String
  state   String
  userId  Int
  user    PlantUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("plant_shipping_addresses")
}

model PlantReview {
  id        Int          @id @default(autoincrement())
  plantId   Int
  plant     PlantProduct @relation(fields: [plantId], references: [id], onDelete: Cascade)
  userId    Int?
  user      PlantUser?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  title     String
  comment   String
  rating    Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([plantId, userId])
  @@map("plant_reviews")
}

//One to One Relationship with PlantUser

model ShoppingCart {
  id        Int        @id @default(autoincrement())
  user_id   Int        @unique
  user      PlantUser  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("shopping_carts")
}

model CartItem {
  id        Int          @id @default(autoincrement())
  cartId    Int
  cart      ShoppingCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity  Int
  product   PlantProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("cart_items")
}

// For Other Projects -(needed since sharing one db)

model game {
  id          Int       @id @default(autoincrement())
  show_number Int?
  air_date    DateTime? @db.Date
  round       String
  category    String
  score       Int
  question    String    @unique
  answer      String
}

model highscores {
  id             Int            @id @default(autoincrement())
  score          Int
  username       String         @db.VarChar(30)
  created        DateTime       @db.Date
  jeopardy_users jeopardy_users @relation(fields: [username], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model jeopardy_users {
  username   String       @id(map: "users_pkey") @db.VarChar(30)
  email      String       @db.VarChar(30)
  hash       String
  created    DateTime     @db.Date
  highscores highscores[]
}

model starlight_highscores {
  id              Int             @id @default(autoincrement())
  username        String          @db.VarChar(30)
  score           Int
  created         DateTime        @db.Date
  starlight_users starlight_users @relation(fields: [username], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model starlight_users {
  username             String                 @id @db.VarChar(30)
  email                String                 @db.VarChar(30)
  hash                 String
  created              DateTime               @db.Date
  starlight_highscores starlight_highscores[]
}
